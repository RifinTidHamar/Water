// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel DynamicLight

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

struct MeshTriangle
{
	float3 p1WPos;
	float2 p1Uv;
	float3 p2WPos;
	float2 p2Uv;
	float3 p3WPos;
	float2 p3Uv;
	float3 normal;
	float3 tangent;
	float3 binormal;
};

struct CSLight
{
	float3 loc;
	float4 color;
	float range;
	float intensity;
};

struct usedUV
{
	float2 uvPos;
	float3 worldLoc;
	float3 normal;
	int used;
	float lit;
};

StructuredBuffer<MeshTriangle> triangles;
StructuredBuffer<CSLight> lights;
RWStructuredBuffer<usedUV> usedUVs;

int numLights;
int numTriangles;
int texRes;
static float eps = 0.046;
RWTexture2D<float4> nm; //normalMap

float hash11(float p)
{
	p = frac(p * 0.1031);
	p *= p + 33.33;
	p *= p + p;
	p = frac(p);
	//p -= 0.5;
	return p;
}

[numthreads(15,15,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	//Result[id.xy] = float4(0.01, 0.01, 0., 1); //ambient light
	float a;
	float b;
	float c;
	float2 curUV = float2((float)id.x / (float)texRes, (float)id.y / (float)texRes);
	for (int i = 0; i < numTriangles; i++)
	{
		float2 p1 = triangles[i].p1Uv;
		float2 p2 = triangles[i].p2Uv;
		float2 p3 = triangles[i].p3Uv;

		a = ((p2.y - p3.y) * (curUV.x - p3.x) + (p3.x - p2.x) * (curUV.y - p3.y)) / ((p2.y - p3.y) * (p1.x - p3.x) + (p3.x - p2.x) * (p1.y - p3.y));
		b = ((p3.y - p1.y) * (curUV.x - p3.x) + (p1.x - p3.x) * (curUV.y - p3.y)) / ((p2.y - p3.y) * (p1.x - p3.x) + (p3.x - p2.x) * (p1.y - p3.y));
		c = 1 - a - b;
		if (0 - eps <= a && a <= 1 + eps && 0 - eps <= b && b <= 1 + eps && 0 - eps <= c && c <= 1 + eps)
		{
			usedUVs[texRes * id.y + id.x].used = 1;
			usedUVs[texRes * id.y + id.x].uvPos = id.xy;

			float3 wp1 = triangles[i].p1WPos;
			float3 wp2 = triangles[i].p2WPos;
			float3 wp3 = triangles[i].p3WPos;

			usedUVs[texRes * id.y + id.x].worldLoc = a * wp1 + b * wp2 + c * wp3;
			nm[id.xy].g = 1 - nm[id.xy].g;
			nm[id.xy] = nm[id.xy] *  2 - 1;
			usedUVs[texRes * id.y + id.x].normal = triangles[i].normal * nm[id.xy].b + triangles[i].binormal * nm[id.xy].g + triangles[i].tangent* nm[id.xy].r;// 
			usedUVs[texRes * id.y + id.x].normal = normalize(usedUVs[texRes * id.y + id.x].normal);
			break;
		}
	}
}
int colCount;
float4 ambient;
float lightContrast;
float lightFallOff;
[numthreads(15,15,1)]
void DynamicLight(uint3 id : SV_DispatchThreadID)
{
	//float4 amb = float4(0.3/1.5, 0.15/1.5, 0.15/1.5, 1);
	//float4 amb = 
    Result[id.xy] = ambient; //ambient light
	float4 lightCol = 0;
	usedUVs[texRes * id.y + id.x].lit = 1;
	if (usedUVs[texRes * id.y + id.x].used == 1)
	{
		for (int i = 0; i < numLights; i++)
		{
			float3 lightLoc = lights[i].loc;
			float3 lightMinusLoc = lightLoc - usedUVs[texRes * id.y + id.x].worldLoc;
			float dist = length(lightMinusLoc);
			float maxDist = lights[i].range;
			float4 col = normalize(lights[i].color) * lights[i].intensity;
            float3 lightVec = normalize(lightMinusLoc) /** (hash11((id.x) * (id.y)) * 0.2 + 0.9)*/;
			
			float angleBetweenLightAndLoc = dot(lightVec, usedUVs[texRes * id.y + id.x].normal) ;

			if (dist < maxDist && angleBetweenLightAndLoc > 0)
			{
				//lightCol = col *angleBetweenLightAndLoc;
				float4 val = (1 - dist / maxDist) * angleBetweenLightAndLoc;
                val = round(val * colCount) / colCount;
                float4 lerpVal = pow(val, lightFallOff);
                lerpVal = ((lerpVal - 0.5) * lightContrast + 0.5);
                lightCol = lerp(lightCol, col, lerpVal * usedUVs[texRes * id.y + id.x].lit);
            }
		}
		Result[id.xy] += lightCol;
	}
}


[numthreads(8,8,1)]
void rayTracedLight(uint3 id : SV_DispatchThreadID)
{
    

}
