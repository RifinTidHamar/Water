// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel moveCrowd
//#define nearbyDist 7
//#define crowdCount 8

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
float dt;
int crowdCount;
int nearbyDistMov;
int standCount;
int wallCount;
struct Person
{
    uint stand;
    uint robes;
    uint headwear;
    float3 pos;
    float3 dir;
    float speed;
	float speedSaved;
	float height;
	float timeAtAshop;
    float finishedTimeAtShop;
    float timeSearching;
};



struct Stand
{
	float3 pos;
};

struct Wall
{
    float3 pos;
    float2 halfScale;
    float4 tblr; //top bottom left right 
};

RWStructuredBuffer<Person> crowd;
StructuredBuffer<Stand> stands;
StructuredBuffer<Wall> walls;

float hash11(float p)
{
	p = frac(p * 0.1031);
	p *= p + 33.33;
	p *= p + p;
	p = frac(p);
	//p -= 0.5;
	return p;
}

int getNewStand(float3 pos)
{
	int randNum = (int) (hash11(pos.z) * standCount);
	return randNum;
}

float3 getNewDir(float3 pos, float3 standPos)
{
	float2 dir = normalize(standPos.xz - pos.xz); //);
	return float3(dir.x, 0, dir.y);
}


[numthreads(1000,1,1)]
void moveCrowd(uint3 id : SV_DispatchThreadID)
{
	uint instanceId = id.x;
	Person boid = crowd[instanceId];
    boid.timeSearching += dt;
    if (boid.timeSearching > 500)
    {
        int newStand = getNewStand(boid.pos);
        boid.stand = newStand;
        boid.dir = getNewDir(boid.pos, stands[newStand].pos);
        boid.timeSearching = 0;

    }
    if (distance(boid.pos.x, stands[boid.stand].pos.x) < 15 && distance(boid.pos.z, stands[boid.stand].pos.z) < 3)
	{
        //boid.pos.y = 1000;
		if (boid.timeAtAshop < boid.finishedTimeAtShop)
		{
            
			boid.speed = 0;
			boid.timeAtAshop += dt;
			crowd[id.x] = boid;
			return;
		}
		else 
		{
            boid.timeSearching = 0;
			int newStand = getNewStand(boid.pos);
			boid.stand = newStand;
			boid.dir = getNewDir(boid.pos, stands[newStand].pos);
			boid.timeAtAshop = 0;
			boid.speed = boid.speedSaved;
            boid.finishedTimeAtShop = (hash11(boid.finishedTimeAtShop) * 0.8 + 0.2) * 30;
		}
	}
	
	float velocity = boid.speed;

	float3 separation = 0;
	float3 dest = float3(stands[boid.stand].pos.x, boid.pos.y, stands[boid.stand].pos.z);

	uint nearbyCount = 1; // Add self that is ignored in loop
	
    float3 tempBoid_position;
    bool boidAvoid = false;
    float offsetMultiplier = 3;
    boid.speed = boid.speedSaved;
    float newSpeed = boid.speedSaved;
	for (uint i = 0; i < (uint) crowdCount + wallCount; i++)
	{
		if (i == instanceId)
			continue;

        boidAvoid = i < (uint) crowdCount ? true : false;

        if(boidAvoid)
        {
            tempBoid_position = crowd[i].pos;
            float3 offset = boid.pos - tempBoid_position;
            float dist = length(offset);
            float temp = newSpeed;
            temp = (dist / 10) * boid.speedSaved;
            if (temp < newSpeed)
            {
                newSpeed = temp;
            }
            if (dist < nearbyDistMov)
            {
                if(dist < 2)
                {
                    offsetMultiplier = 3;
                    newSpeed = 0.5;
                }
                dist += 0.000001; //Avoid division by zero
                separation += offset * offsetMultiplier * (1.0 / dist - 1.0 / nearbyDistMov);
                
                dest += tempBoid_position;
                nearbyCount += 1;
            }
        }
        else if (!boidAvoid) //thus wall avoid
        {
            bool cont = false;
            nearbyDistMov = 5;
            offsetMultiplier = 30;
            tempBoid_position = 0;
            float4 tblr = walls[i - crowdCount].tblr;
            bool withinWidth = boid.pos.z < tblr.z && boid.pos.z > tblr.w;
            bool withinHeight = boid.pos.x < tblr.x && boid.pos.x > tblr.y;

            if (withinWidth && distance(boid.pos.x, tblr.x) < nearbyDistMov)
            {
                tempBoid_position = float3(tblr.x, boid.pos.yz);
                cont = true;
            }
            else if (withinWidth && distance(boid.pos.x, tblr.y) < nearbyDistMov)
            {
                tempBoid_position = float3(tblr.y, boid.pos.yz);
                cont = true;
            }
            else if (withinHeight && distance(boid.pos.z, tblr.w) < nearbyDistMov)
            {
                tempBoid_position = float3(boid.pos.xy, tblr.w);
                cont = true;
            }
            else if (withinHeight && distance(boid.pos.z, tblr.z) < nearbyDistMov)
            {
                tempBoid_position = float3(boid.pos.xy, tblr.z);
                cont = true;
            }

            if (cont)
            {
                float3 offset = boid.pos - tempBoid_position;
                float dist = length(offset);
                if (dist < nearbyDistMov)
                {
                    dist += 0.000001; //Avoid division by zero
                    separation += offset * offsetMultiplier * (1.0 / dist - 1.0 / nearbyDistMov);
                }
                dest += tempBoid_position;
			
                nearbyCount += 1;
            }
        }
    }
    boid.speed = newSpeed;
	float avg = 1.0 / nearbyCount;
	dest *= avg;
	dest = normalize(dest - boid.pos);

	float3 direction = dest + separation;

	float ip = exp(-1 * dt);
    boid.dir = lerp((direction), normalize(boid.dir), ip);

	boid.pos += (boid.dir) * (velocity * dt);

	crowd[id.x] = boid;
}