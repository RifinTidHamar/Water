#pragma kernel Smoke
#pragma kernel SmoothPath
#pragma kernel Blur

#include "noiseSimplex.cginc"
#pragma enable_d3d11_debug_symbols

RWTexture3D<float4> smokeText;

float4 mPos;//mouse pos
float4 rDir;//rayDirection
float4 wSpace; //world space of the cubeOrigin

int texRes;//resoultion of the texture
static float dt = 0.01666666666;
float time;
int pCnt;//total particles in the simulation

//int cCnt;//total number of cells in the table
//int idPCell;//max ids in a cell

//struct cell
//{
//    int cPart[511];//when changing this value, also change argument for calcNFree as well as the cellCount in the c# scirpt
//    int nFree;
//};


struct smokeParticle
{
    float3 vel;
    float3 mVel;
    float uSpeed;
    int3 pos;
    int id;
    int3 cInd;
};


RWStructuredBuffer<smokeParticle> smp; //smoke particles
//RWStructuredBuffer<cell> tbl; //table of cells
//int calcNFree(int c[511])//when changing this value, also change argument for cell struct as well as the cellCount in the c# scirpt
//{
//    int index = 0;
//    for (int i = 0; i < idPCell; i++)
//    {
//        if (c[i] == 0)
//        {
//            index = i;
//            break;
//        }
//    }
//    return index;
//}

//float2 searchCellForVel (int2 ind, float2 pos, int curId)
//{
//    int index = ind.y * (uint) cCnt / (uint) 2 + ind.x;
//    float2 vel = float2(0, 0);
//    for (int i = 0; i < idPCell; i++)
//    {
//        int otherID = tbl[index].cPart[i];
//        if (otherID == curId)//index is base 1 according to c# code
//            break;
//        if ((uint) tbl[index].cPart[i] == (uint) curId)
//            continue;
//        float2 pos2 = float2((float2) smp[otherID].pos / (float) texRes);
//        float dst = abs(distance(pos, pos2));
//        if (dst < 0.01 || dst > 0.5)
//            continue;
//        float attr = (1 / dst) / 20;
//        float2 direction = normalize(pos2 - pos);
//        vel += direction * attr;
//    }
//    return vel;
//}

float hash11(float p)
{
    p = frac(p * 0.1031);
    p *= p + 33.33;
    p *= p + p;
    p = frac(p);
        //p -= 0.5;
    return p;
}

[numthreads(64, 1, 1)]
void Smoke(uint3 id : SV_DispatchThreadID)
{
    //float4 noCol = float4(0, 0, 0, 0);
    //int ps = 1;
    //for (int l = -ps; l < ps; l++)
    //{
    //    for (int h = -ps; h < ps; h++)
    //    {
    //        for (int w = -ps; w < ps; w++)
    //        {
    //            smokeText[smp[id.x].pos.xyz + int3(l, h, w)] = noCol;
    //        }
    //    }
    //}
    
    float3 pos = float3((float3) smp[id.x].pos / (float) texRes);
    float attrCof = pCnt / 40;//80

    for (int i = 0; i < pCnt; i++)
    {
        if (id.x == (uint) i)
            continue;
        float3 pos2 = float3((float3) smp[i].pos / (float) texRes);
        float dst = abs(distance(pos, pos2));
        if (dst < 0.3 /*|| dst > 0.5*/)
            continue;
        float attr = (1 / dst) / attrCof;
        float3 direction = normalize(pos2 - pos);
        float3 attrXYZ = float3(attr, attr * 0.05, attr);
        smp[id.x].vel += direction * attrXYZ;
    }
    

    
    
    smp[id.x].vel = clamp(smp[id.x].vel, -50, 50);
    
     //for mouse
    float3 pPos = float3(pos.x, 1 - pos.y, pos.z);
    pPos *= 1.5;
    float3 wPos = pPos + wSpace.xyz + float3(-0.48, -0.5, -0.48);
    float3 lineToPoint = wPos - mPos.xyz;

    // Calculate the projection of lineToPoint onto lineDirection.
    //rDir = float4(0,0,0,0) - rDir;
    float projection = dot(lineToPoint, rDir.xyz);

        // Calculate the closest point on the line.
    float3 closestPos = mPos.xyz + (rDir.xyz * projection);
    float dst = abs(distance(wPos, closestPos));
    bool red = false;
    if (dst < 0.1)
    {
        smp[id.x].pos = float4(0, 1, 0, 1);
        float attr = (1 / dst) * attrCof * 20;// * 0.1;
        float3 direction = normalize(closestPos - wPos);
        smp[id.x].mVel += direction * -attr;
        red = true;
    }
    smp[id.x].mVel /= 1.5;
    smp[id.x].mVel = clamp(smp[id.x].mVel, -150, 150);
    //for mouse

    float noiseVal = snoise(pos.xyz * float3(7, 50, 7) + time * 0.05 + (smp[id.x].id)) * 1; //smallnoise
    noiseVal += (snoise(pos.xyz * 2 + time * 0.7) + 0.2) * 1; //big noise
    //float noiseVal = (snoise(pos.xyz * 2 + time * 0.1) + 0.2) * 2; //big noise
    int s = sign(noiseVal);
    float invNoise = (1 - noiseVal);
    float RorA = invNoise * (pos.y + 0.5); //lerp(1, invNoise, pos.y + 0.5); //(abs(noiseVal) * 0.2 + 0.8 + 0.2) * s;
    
    smp[id.x].vel.y += 20 * RorA;
    
    pos += (smp[id.x].mVel + smp[id.x].vel) * 0.01 * dt * float3(RorA, 1, 1 - RorA);
    if (pos.y > 1 || pos.y < 0)
    {
        //pos.y = hash11(pos.x);
        int spawn = (int) (hash11(pos.x + pos.z + smp[id.x].id) * 3);
        if(spawn == 0)
            pos = float3(hash11(pos.x + smp[id.x].id) * 0.05 + 0.2, 0.1, hash11(pos.z + smp[id.x].id) * 0.05 + 0.3);
        else if (spawn == 1)
            pos = float3(hash11(pos.x + smp[id.x].id) * 0.05 + 0.4, 0, hash11(pos.z + smp[id.x].id) * 0.05 + 0.2);
        else 
            pos = float3(hash11(pos.x + smp[id.x].id) * 0.05 + 0.2, 0, hash11(pos.z + smp[id.x].id) * 0.05 + 0.4);
  
        smp[id.x].vel = 0;
        //smp[id.x].mVel = 0;

    }
    
    //if (pos.x > 1 || pos.x < 0)
    
    //    pos.x = 
    //    pos.y = hash11(pos.y);
    //    //pos.x = hash11(pos.x) * 0.5 + 0.25;
    //}
    smp[id.x].pos = round(pos * texRes);
    
    
    int ps = 1;
    for (int l = -ps; l < ps; l++)
    {
        for (int h = -ps; h < ps; h++)
        {
            for (int w = -ps; w < ps; w++)
            {
                smokeText[smp[id.x].pos.xyz + int3(l, h, w)] = float4(1, 1, 1, 1);
                //if(red)
                //{
                //    smokeText[smp[id.x].pos.xyz + int3(l, h, w)] = float4(1, 0.2, 0.2, 1);
                //}
            }
        }
    }
}

static int kSize = 1;

[numthreads(8, 8, 8)]
void SmoothPath(uint3 id : SV_DispatchThreadID)
{
    smokeText[id.xyz] -= 0.3;
}

[numthreads(8, 8, 8)]
void Blur(uint3 id : SV_DispatchThreadID)
{
    float4 result = float4(0, 0, 0, 0);
    
    for (int x = 0; x <= kSize; x++)
    {
        for (int z = 0; z <= kSize; z++)
        {
            result += smokeText[id.xyz + int3(x, 0, z)] / float(pow(2 * kSize + 1, 2));
        }
    }
    smokeText[id.xyz] += result;
}

//[numthreads(1, 1, 1)]
//void CreateTable(uint3 id : SV_DispatchThreadID)
//{
//    int cellHW = (int) sqrt(cCnt);
//    int HWpixelsPerCell = (uint) texRes / (uint) cellHW;
    
//    for (int i = 0; i < cCnt; i++)
//    {
//        //tbl[i].cPart[idPCell];
//        for (int j = 0; j < idPCell; j++)
//        {
//            tbl[i].cPart[j] = -1;
//        }
//        tbl[i].nFree = 0;
//    }
    
//    for (int k = 0; k < pCnt; k++)
//    {
//        int2 ind = (int2) (smp[k].pos / (uint) HWpixelsPerCell);
//        int index = ind.y * cellHW + ind.x;
//        tbl[index].cPart[tbl[index].nFree] = smp[k].id;
//        tbl[index].nFree++;

//        smp[k].cInd = ind;
//    }
//}

//change pCnt to look through the 9 surrounding cells(including current cell)
    //for (int i = 0; i < pCnt; i++)
    //{
    //    if (id.x == (uint) i)
    //        continue;
    //    float2 pos2 = float2((float2) smp[i].pos / (float) texRes);
    //    float dst = abs(distance(pos, pos2));
    //    if (dst < 0.01 || dst > 0.5)
    //        continue;
    //    float attr = (1 / dst) / 20;
    //    float2 direction = normalize(pos2 - pos);
    //    smp[id.x].vel += direction * attr;
    //}


//smp[id.x].vel = 0;
    ////really not necessary to do in here
    //int cellHW = (uint) cCnt / (uint) 2;
    //int pixelsPerCell = (uint) texRes / (uint) cellHW;
    ////really not necessary to do in here
    
    //int2 ind = (int2) (smp[id.x].pos / (uint) pixelsPerCell);
    //int index = ind.y * cellHW + ind.x;
    //tbl[index].cPart[tbl[index].nFree] = smp[id.x].id;
    //tbl[index].nFree = calcNFree(tbl[index].cPart);
    //index = smp[id.x].cInd.r * cellHW * smp[id.x].cInd.x;
    //tbl[index].nFree = calcNFree(tbl[index].cPart);