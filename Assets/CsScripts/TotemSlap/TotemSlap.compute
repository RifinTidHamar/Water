#pragma kernel Clay
#pragma kernel CheckClearGrid
#pragma kernel ColorRedGrid
#pragma kernel ClearText
#pragma enable_d3d11_debug_symbols

RWTexture2D<float4> clayText;

float4 mPos; //mouse pos

int gCellHW; //how many cells per side of Grid
int cellRes; //size of each Grid Cell (cells overlap by one pixel
int texRes; //resoultion of the texture
static float dt = 0.001666666666;
int pCnt; //total particles in the simulation

struct clayParticle
{
    float2 mVel;
    int2 pos;
    int safe;
    int id;
};


RWStructuredBuffer<clayParticle> cPart; //clay particles
RWStructuredBuffer<int> empC; //emptiedCells
RWStructuredBuffer<int> emptied;

float hash11(float p)
{
    p = frac(p * 0.1031);
    p *= p + 33.33;
    p *= p + p;
    p = frac(p);
        //p -= 0.5;
    return p;
}

[numthreads(16,16,1)]
void ClearText(uint3 id : SV_DispatchThreadID)
{
    clayText[id.xy] = float4(0,0,0,0);
}

[numthreads(64, 1, 1)]
void Clay(uint3 id : SV_DispatchThreadID)
{
    //float4 noCol = float4(0, 0, 0, 0);
    int ps = 8; // This is the radius of the circle

    /*for (int l = -ps; l < ps; l++)
    {
        for (int h = -ps; h < ps; h++)
        {
            float hyp = sqrt(l * l + h * h);
            if(hyp <= ps)
            {
                clayText[cPart[id.x].pos.xy + int2(l, h)] = noCol;
            }
        }
    }*/
    
    //float4 noCol = float4(0, 0, 0, 0);
    //int l = 0;
    //int h = 0;
    //clayText[cPart[id.x].pos.xy + int2(l, h)] = noCol;
    
    float2 pos = float2((float2) cPart[id.x].pos / (float) texRes);

    float2 vel = 0;
    
    for (int i = 0; i < pCnt; i++)
    {
        if (id.x == (uint) i)
            continue;
        float2 pos2 = float2((float2) cPart[i].pos / (float) texRes);
        float dst = abs(distance(pos, pos2));
        
        if (dst > 0.08)
            continue;
        float2 direction = normalize(pos2 - pos);
        //if (dst < 0.028)
        //{
        //    vel += direction.yx * -7 * dt;
        //}
        vel += direction * -7 * dt;
    }
        
     //for mouse
    
    mPos = float4(mPos.x, 1 - mPos.y, 0, 0);
    float dst = abs(distance(pos, mPos.xy));
    if (dst < 0.15)
    {
        float2 direction = normalize(mPos.xy - pos);
        vel += direction * -5 * dt;
    }
    
    if (pos.x > 0.97)
    {
        vel += float2(1, 0) * -10 * dt;
    }
    else if (pos.x < 0.03)
    {
        vel += float2(-1, 0) * -10 * dt;
    }
    
    if (pos.y > 0.97)
    {
        vel += float2(0, 1) * -10 * dt;
    }
    else if (pos.y < 0.03)
    {
        vel += float2(0, -1) * -10 * dt;
    }
    
    //vel.y -= 0.1;
    
    pos += vel;
    
    
    cPart[id.x].pos = round(pos * texRes);
    
    int x = (uint)cPart[id.x].pos.x / (uint)cellRes;
    int y = (uint)cPart[id.x].pos.y / (uint)cellRes;
    int index = y * gCellHW + x;
    
    if (empC[index] == 1)
    {
        cPart[id.x].safe = 0;
    }
    else
    {
        cPart[id.x].safe = 1;
    }
    for (int l = -ps; l < ps; l++)
    {
        for (int h = -ps; h < ps; h++)
        {
            float hyp = sqrt(l * l + h * h);
            if (hyp <= ps)
            {
                /*if (empC[index] == 1)
                {
                    clayText[cPart[id.x].pos.xy + int2(l, h)] = float4(1, 0, 0, 1);
                }
                else
                {*/
                    float t = hash11(cPart[id.x].id) * 0.2 + 0.8;
                    clayText[cPart[id.x].pos.xy + int2(l, h)] = float4(t, t, t, 1);
                //}
            }
        }
    }
    //clayText[cPart[id.x].pos.xy + int2(l, h)] = float4(1, 1, 1, 1);
}

[numthreads(1, 1, 1)]
void CheckClearGrid(uint3 id : SV_DispatchThreadID)
{
    int empty = 1;
    for (int i = 0; i < pCnt; i++)
    {
        /*int x = (int) cPart[i].pos.x / (int) cellRes;
        int y = (int) cPart[i].pos.y / (int) cellRes;
        int index = y * gCellHW + x;
        if (empC[index] == 1)
        {
            empty = false;
            break;
        }*/
        if (cPart[i].safe == 0)
        {
            empty = 0;
            break;
        }
    }
    emptied[0] = empty;
}

[numthreads(16,16, 1)]
void ColorRedGrid(uint3 id : SV_DispatchThreadID)
{
    int x = (uint)id.x / (uint)cellRes;
    int y = (uint)id.y / (uint)cellRes;
    int index = y * gCellHW + x;
    
    if (empC[index] == 1)
    {
        clayText[id.xy] += float4(1, 0, 0, 0.8);
    }
}